
$ man git

Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.

       See gittutorial(7) to get started, then see giteveryday(7) for a useful minimum set of commands. The Git User's Manual[1] has a more in-depth introduction.

       After you mastered the basic concepts, you can come back to this page to learn what commands Git offers. You can learn more about individual Git commands with "git help
       command". gitcli(7) manual page gives you an overview of the command-line command syntax.

       Formatted and hyperlinked version of the latest Git documentation can be viewed at http://git-htmldocs.googlecode.com/git/git.html.


目的是用来测试命令 git diff HEAD -- 和 git diff -- HEAD

When an argument can be misunderstood as either a revision or a path, they can be disambiguated by placing -- between them. E.g.  git diff -- HEAD is, "I have a file
called HEAD in my work tree. Please show changes between the version I staged in the index and what I have in the work tree for that file", not "show difference between
the HEAD commit and the work tree as a whole". You can say git diff HEAD -- to ask for the latter.

类似的实际使用到的有：
git checkout -- <file>
git checkout <new_branch>


Many commands allow wildcards in paths, but you need to protect them from getting globbed by the shell. These two mean different things:
$ git checkout -- *.c
$ git checkout -- \*.c

The former lets your shell expand the fileglob, and you are asking the dot-C files in your working tree to be overwritten with the version in the index. The latter passes
the *.c to Git, and you are asking the paths in the index that match the pattern to be checked out to your working tree. After running git add hello.c; rm hello.c, you
will not see hello.c in your working tree with the former, but with the latter you will.

Here are the rules regarding the "flags" that you should follow when you are scripting Git:
       o   it's preferred to use the non-dashed form of Git commands, which means that you should prefer git foo to git-foo.
       o   splitting short options to separate words (prefer git foo -a -b to git foo -ab, the latter may not even work).
       o   when a command-line option takes an argument, use the stuck form. In other words, write git foo -oArg instead of git foo -o Arg for short options, and git foo
           --long-opt=Arg instead of git foo --long-opt Arg for long options. An option that takes optional option-argument must be written in the stuck form.
       o   when you give a revision parameter to a command, make sure the parameter is not ambiguous with a name of a file in the work tree. E.g. do not write git log -1 HEAD but
           write git log -1 HEAD --; the former will not work if you happen to have a file called HEAD in the work tree.
       o   many commands allow a long option --option to be abbreviated only to their unique prefix (e.g. if there is no other option whose name begins with opt, you may be able to
           spell --opt to invoke the --option flag), but you should fully spell them out when writing your scripts; later versions of Git may introduce a new option whose name
           shares the same prefix, e.g.  --optimize, to make a short prefix that used to be unique no longer unique.

Magic Options
   Commands which have the enhanced option parser activated all understand a couple of magic command-line options:

   -h
       gives a pretty printed usage of the command.

           $ git describe -h
           usage: git describe [options] <commit-ish>*
              or: git describe [options] --dirty

               --contains            find the tag that comes after the commit
               --debug               debug search strategy on stderr
               --all                 use any ref
               --tags                use any tag, even unannotated
               --long                always use long format
               --abbrev[=<n>]        use <n> digits to display SHA-1s


   --help-all
       Some Git commands take options that are only used for plumbing or that are deprecated, and such options are hidden from the default usage. This option gives the full list
       of options.

